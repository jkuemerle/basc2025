- name: API-only XSS
  description: 'Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> without using the
    frontend application at all. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 84e6cb7ef1964f9affa528ec46b6d0021092ebd2
      data: null
  hints:
    - type: standard
      content: You need to work with the server-side API directly. Try different HTTP
        verbs on different entities exposed through the API.
      cost: 45
      requirements: null
    - type: standard
      content: >-
        <pre><code>ngAfterViewInit () {
            const products = this.productService.search('')
            const quantities = this.quantityService.getAll()
            forkJoin([quantities, products]).subscribe(([quantities, products]) => {
              const dataTable: TableEntry[] = []
              this.tableData = products
              this.trustProductDescription(products)
              for (const product of products) {
                dataTable.push({
                  name: product.name,
                  price: product.price,
                  deluxePrice: product.deluxePrice,
                  id: product.id,
                  image: product.image,
                  description: product.description
                })
              }
              for (const quantity of quantities) {
                const entry = dataTable.find((dataTableEntry) => {
                  return dataTableEntry.id === quantity.ProductId
                })
                if (entry === undefined) {
                  continue
                }
                entry.quantity = quantity.quantity
              }
              this.dataSource = new MatTableDataSource<TableEntry>(dataTable)
              for (let i = 1; i <= Math.ceil(this.dataSource.data.length / 12); i++) {
                this.pageSizeOptions.push(i * 12)
              }
              this.paginator.pageSizeOptions = this.pageSizeOptions
              this.dataSource.paginator = this.paginator
              this.gridDataSource = this.dataSource.connect()
              this.resultsLength = this.dataSource.data.length
              this.filterTable()
              this.routerSubscription = this.router.events.subscribe(() => {
                this.filterTable()
              })
              if (window.innerWidth < 2600) {
                this.breakpoint = 4
                if (window.innerWidth < 1740) {
                  this.breakpoint = 3
                  if (window.innerWidth < 1280) {
                    this.breakpoint = 2
                    if (window.innerWidth < 850) {
                      this.breakpoint = 1
                    }
                  }
                }
              } else {
                this.breakpoint = 6
              }
              this.cdRef.detectChanges()
            }, (err) => { console.log(err) })
          }

          trustProductDescription (tableData: any[]) {
            for (let i = 0; i < tableData.length; i++) {
              tableData[i].description = this.sanitizer.bypassSecurityTrustHtml(tableData[i].description)
            }
          }</code></pre>
      cost: 135
      requirements: null
  tags:
    - value: Danger Zone
- name: Access Log
  description: "Gain access to any access log file of the server. (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 9f84bc7a6265d1520cf6ea1a29ff3067bf72e686
      data: null
  hints:
    - type: standard
      content: Who would want a server access log to be accessible through a web
        application?
      cost: 70
      requirements: null
    - type: standard
      content: >-
        <pre><code>/* /ftp directory browsing and file download */
          app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))
          app.use('/ftp(?!/quarantine)/:file', fileServer())
          app.use('/ftp/quarantine/:file', quarantineServer())

          app.use('/.well-known', serveIndexMiddleware, serveIndex('.well-known', { icons: true, view: 'details' }))
          app.use('/.well-known', express.static('.well-known'))

          /* /encryptionkeys directory browsing */
          app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))
          app.use('/encryptionkeys/:file', keyServer())

          /* /logs directory browsing */
          app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))
          app.use('/support/logs/:file', logFileServer())

          /* Swagger documentation for B2B v2 endpoints */
          app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument))

          app.use(express.static(path.resolve('frontend/dist/frontend')))
          app.use(cookieParser('kekse'))</code></pre>
      cost: 210
      requirements: null
  tags: []
- name: Admin Registration
  description: "Register as a user with administrator privileges. (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 0721244755a6c0652500c1e371c0ecf5ce59c472
      data: null
  hints:
    - type: standard
      content: You have to assign the unassignable.
      cost: 45
      requirements: null
    - type: standard
      content: >-
        <pre><code>/* Generated API endpoints */
          finale.initialize({ app, sequelize })

          const autoModels = [
            { name: 'User', exclude: ['password', 'totpSecret'], model: UserModel },
            { name: 'Product', exclude: [], model: ProductModel },
            { name: 'Feedback', exclude: [], model: FeedbackModel },
            { name: 'BasketItem', exclude: [], model: BasketItemModel },
            { name: 'Challenge', exclude: [], model: ChallengeModel },
            { name: 'Complaint', exclude: [], model: ComplaintModel },
            { name: 'Recycle', exclude: [], model: RecycleModel },
            { name: 'SecurityQuestion', exclude: [], model: SecurityQuestionModel },
            { name: 'SecurityAnswer', exclude: [], model: SecurityAnswerModel },
            { name: 'Address', exclude: [], model: AddressModel },
            { name: 'PrivacyRequest', exclude: [], model: PrivacyRequestModel },
            { name: 'Card', exclude: [], model: CardModel },
            { name: 'Quantity', exclude: [], model: QuantityModel }
          ]

          for (const { name, exclude, model } of autoModels) {
            const resource = finale.resource({
              model,
              endpoints: [`/api/${name}s`, `/api/${name}s/:id`],
              excludeAttributes: exclude,
              pagination: false
            })

            // create a wallet when a new user is registered using API
            if (name === 'User') {
              resource.create.send.before((req: Request, res: Response, context: { instance: { id: any }, continue: any }) => {
                WalletModel.create({ UserId: context.instance.id }).catch((err: unknown) => {
                  console.log(err)
                })
                return context.continue
              })
            }</code></pre>
      cost: 135
      requirements: null
  tags: []
- name: Admin Section
  description: "Access the administration section of the store. (Difficulty Level: 2)"
  max_attempts: 0
  value: 250
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: bc71fb57db76174b67e661da01070ae3ebfb8042
      data: null
  hints:
    - type: standard
      content: It is just slightly harder to find than the score board link.
      cost: 25
      requirements: null
    - type: standard
      content: >-
        <pre><code>const routes: Routes = [
          {
            path: 'administration',
            component: AdministrationComponent,
            canActivate: [AdminGuard]
          },
          {
            path: 'accounting',
            component: AccountingComponent,
            canActivate: [AccountingGuard]
          },
          {
            path: 'about',
            component: AboutComponent
          },
          {
            path: 'address/select',
            component: AddressSelectComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'address/saved',
            component: SavedAddressComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'address/create',
            component: AddressCreateComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'address/edit/:addressId',
            component: AddressCreateComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'delivery-method',
            component: DeliveryMethodComponent
          },
          {
            path: 'deluxe-membership',
            component: DeluxeUserComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'saved-payment-methods',
            component: SavedPaymentMethodsComponent
          },
          {
            path: 'basket',
            component: BasketComponent
          },
          {
            path: 'order-completion/:id',
            component: OrderCompletionComponent
          },
          {
            path: 'contact',
            component: ContactComponent
          },
          {
            path: 'photo-wall',
            component: PhotoWallComponent
          },
          {
            path: 'complain',
            component: ComplaintComponent
          },
          {
            path: 'chatbot',
            component: ChatbotComponent
          },
          {
            path: 'order-summary',
            component: OrderSummaryComponent
          },
          {
            path: 'order-history',
            component: OrderHistoryComponent
          },
          {
            path: 'payment/:entity',
            component: PaymentComponent
          },
          {
            path: 'wallet',
            component: WalletComponent
          },
          {
            path: 'login',
            component: LoginComponent
          },
          {
            path: 'forgot-password',
            component: ForgotPasswordComponent
          },
          {
            path: 'recycle',
            component: RecycleComponent
          },
          {
            path: 'register',
            component: RegisterComponent
          },
          {
            path: 'search',
            component: SearchResultComponent
          },
          {
            path: 'hacking-instructor',
            component: SearchResultComponent
          },
          {
            path: 'score-board',
            component: ScoreBoardComponent
          },
          {
            path: 'track-result',
            component: TrackResultComponent
          },
          {
            path: 'track-result/new',
            component: TrackResultComponent,
            data: {
              type: 'new'
            }
          },
          {
            path: '2fa/enter',
            component: TwoFactorAuthEnterComponent
          },
          {
            path: 'privacy-security',
            component: PrivacySecurityComponent,
            children: [
              {
                path: 'privacy-policy',
                component: PrivacyPolicyComponent
              },
              {
                path: 'change-password',
                component: ChangePasswordComponent
              },
              {
                path: 'two-factor-authentication',
                component: TwoFactorAuthComponent
              },
              {
                path: 'data-export',
                component: DataExportComponent
              },
              {
                path: 'last-login-ip',
                component: LastLoginIpComponent
              }
            ]
          },
          {
            path: 'juicy-nft',
            component: NFTUnlockComponent
          },
          {
            path: 'wallet-web3',
            loadChildren: async () => await loadWeb3WalletModule()
          },
          {
            path: 'web3-sandbox',
            loadChildren: async () => await loadWeb3SandboxtModule()
          },
          {
            path: 'bee-haven',
            loadChildren: async () => await loadFaucetModule()
          },
           {
            matcher: oauthMatcher,
            data: { params: (window.location.href).substr(window.location.href.indexOf('#')) },
            component: OAuthComponent
          },
          {
            matcher: tokenMatcher,
            component: TokenSaleComponent
          },
          {
            path: '403',
            component: ErrorPageComponent
          },
          {
            path: '**',
            component: SearchResultComponent
          }
        ]</code></pre>
      cost: 75
      requirements: null
  tags:
    - value: Good for Demos
- name: Arbitrary File Write
  description: 'Overwrite the <a href="/ftp/legal.md">Legal Information</a> file.
    (Difficulty Level: 6)'
  max_attempts: 0
  value: 1350
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: c11e9bc21c6c43bd82f8a99f5377ac312f81c252
      data: null
  hints:
    - type: standard
      content: Look out for a tweet praising new functionality of the web shop. Then
        find a third party vulnerability associated with it.
      cost: 135
      requirements: null
  tags:
    - value: Danger Zone
    - value: Prerequisite
- name: Bjoern's Favorite Pet
  description: "Reset the password of Bjoern's OWASP account via the <a
    href=\"/#/forgot-password\">Forgot Password</a> mechanism with <i>the
    original answer</i> to his security question. (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 761e222556677f41aa129ffd32f4486a8347aa19
      data: null
  hints:
    - type: standard
      content: He might have trumpeted it on at least one occasion where a camera was
        running. Maybe elsewhere as well.
      cost: 45
      requirements: null
    - type: standard
      content: >-
        <pre><code>-
          question: 'Your eldest siblings middle name?'
        -
          question: "Mother's maiden name?"
        -
          question: "Mother's birth date? (MM/DD/YY)"
        -
          question: "Father's birth date? (MM/DD/YY)"
        -
          question: "Maternal grandmother's first name?"
        -
          question: "Paternal grandmother's first name?"
        -
          question: 'Name of your favorite pet?'
        -
          question: "Last name of dentist when you were a teenager? (Do not include 'Dr.')"
        -
          question: 'Your ZIP/postal code when you were a teenager?'
        -
          question: 'Company you first work for as an adult?'
        -
          question: 'Your favorite book?'
        -
          question: 'Your favorite movie?'
        -
          question: 'Number of one of your customer or ID cards?'
        -
          question: "What's your favorite place to go hiking?"</code></pre>
      cost: 135
      requirements: null
  tags:
    - value: OSINT
- name: Blockchain Hype
  description: "Learn about the Token Sale before its official announcement.
    (Difficulty Level: 5)"
  max_attempts: 0
  value: 1000
  category: Security through Obscurity
  type: standard
  state: visible
  flags:
    - type: static
      content: 77a66280bbd06ae0b3dd7dcbd15b70692f73ee20
      data: null
  hints:
    - type: standard
      content: The developers truly believe in "Security through Obscurity" over
        actual access restrictions.
      cost: 100
      requirements: null
    - type: standard
      content: >-
        <pre><code>{
            matcher: oauthMatcher,
            data: { params: (window.location.href).substr(window.location.href.indexOf('#')) },
            component: OAuthComponent
          },
          {
            matcher: tokenMatcher,
            component: TokenSaleComponent
          },
          {
            path: '403',
            component: ErrorPageComponent
          },
          {
            path: '**',
            component: SearchResultComponent
          }
        ]


        export const Routing = RouterModule.forRoot(routes, { useHash: true })


        export function oauthMatcher (url: UrlSegment[]): UrlMatchResult {
          if (url.length === 0) {
            return null as unknown as UrlMatchResult
          }
          const path = window.location.href
          if (path.includes('#access_token=')) {
            return ({ consumed: url })
          }

          return null as unknown as UrlMatchResult
        }


        export function tokenMatcher (url: UrlSegment[]): UrlMatchResult {
          if (url.length === 0) {
            return null as unknown as UrlMatchResult
          }
         
          const path = url[0].toString()
          // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
          if (path.match((token1(25, 184, 174, 179, 182, 186) + (36669).toString(36).toLowerCase() + token2(13, 144, 87, 152, 139, 144, 83, 138) + (10).toString(36).toLowerCase()))) {
            return ({ consumed: url })
          }
         
          return null as unknown as UrlMatchResult
        }


        export function token1 (...args: number[]) {
          const L = Array.prototype.slice.call(args)
          const D = L.shift()
          return L.reverse().map(function (C, A) {
            return String.fromCharCode(C - D - 45 - A)
          }).join('')
        }


        export function token2 (...args: number[]) {
          const T = Array.prototype.slice.call(arguments)
          const M = T.shift()
          return T.reverse().map(function (m, H) {
            return String.fromCharCode(m - M - 24 - H)
          }).join('')
        }</code></pre>
      cost: 300
      requirements: null
  tags:
    - value: Contraption
    - value: Code Analysis
    - value: Web3
- name: NFT Takeover
  description: "Take over the wallet containing our official Soul Bound Token
    (NFT). (Difficulty Level: 2)"
  max_attempts: 0
  value: 250
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 6bf0123c11f188ea1f9626c0efa89987ca260a96
      data: null
  hints:
    - type: standard
      content: Find the seed phrase posted accidentally.
      cost: 25
      requirements: null
    - type: standard
      content: >-
        <pre><code>pragma solidity ^0.8.4;


        import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

        import
        "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";

        import "@openzeppelin/contracts/access/Ownable.sol";

        import "@openzeppelin/contracts/utils/Counters.sol";


        contract JuiceShopSBT is ERC721, ERC721URIStorage, Ownable {
            using Counters for Counters.Counter;

            Counters.Counter private _tokenIdCounter;

            constructor() ERC721("JuiceShopSBT", "JS") {}

            function safeMint(address to, string memory uri) public onlyOwner {
                uint256 tokenId = _tokenIdCounter.current();
                _tokenIdCounter.increment();
                _safeMint(to, tokenId);
                _setTokenURI(tokenId, uri);
            }

            function _beforeTokenTransfer(
            address from,
            address to,
            uint256 tokenId
            ) internal override virtual {
            require(from == address(0), "Err: token transfer is BLOCKED");
            super._beforeTokenTransfer(from, to, tokenId);
            }

            function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
                super._burn(tokenId);
            }

            function tokenURI(uint256 tokenId)
                public
                view
                override(ERC721, ERC721URIStorage)
                returns (string memory)
            {
                return super.tokenURI(tokenId);
            }
        }</code></pre>
      cost: 75
      requirements: null
  tags:
    - value: Contraption
    - value: Good for Demos
    - value: Web3
- name: Mint the Honey Pot
  description: "Mint the Honey Pot NFT by gathering BEEs from the bee haven.
    (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 745b8a0f6770127f5fdf46280d45292fd33f22c2
      data: null
  hints:
    - type: standard
      content: Discover NFT wonders among the captivating visual memories.
      cost: 45
      requirements: null
    - type: standard
      content: >-
        <pre><code>pragma solidity ^0.8.0;


        import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

        import "@openzeppelin/contracts/access/Ownable.sol";

        import "@openzeppelin/contracts/utils/math/SafeMath.sol";

        import "@openzeppelin/contracts/token/ERC20/IERC20.sol";


        contract HoneyPotNFT is ERC721, Ownable {
            using SafeMath for uint256;

            IERC20 public token = IERC20(0x36435796Ca9be2bf150CE0dECc2D8Fab5C4d6E13);
            uint256 public constant mintPrice = 1000 * (10**18);
            uint256 public totalSupply = 0;

            string public constant fixedMetadataHash = "QmRad1vxT3soFMNx9j3bBmkABb4C86anY1f5XeonosHy3m";
            event NFTMinted(address indexed owner, uint256 tokenId);

            constructor() ERC721("The Enchanted Honey Pot", "EHP") {}

            function mintNFT() external {
                token.transferFrom(msg.sender, address(this), mintPrice);
                _safeMint(msg.sender, totalSupply);
                totalSupply = totalSupply.add(1);
                emit NFTMinted(msg.sender, totalSupply - 1);
            }

            function tokenURI(uint256 tokenId) public view override returns (string memory) {
                require(_exists(tokenId), "Token does not exist.");
                return fixedMetadataHash;
            }
        }</code></pre>
      cost: 135
      requirements: null
  tags:
    - value: Web3
    - value: Internet Traffic
- name: Wallet Depletion
  description: "Withdraw more ETH from the new wallet than you deposited.
    (Difficulty Level: 6)"
  max_attempts: 0
  value: 1350
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: 364dc98495ca40771bea32e7fa777e5d9c7d5777
      data: null
  hints:
    - type: standard
      content: Try to exploit the contract of the wallet.
      cost: 135
      requirements: null
    - type: standard
      content: |-
        <pre><code>pragma solidity ^0.6.12;
        import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.3/contracts/math/SafeMath.sol';

        contract ETHWalletBank {
          using SafeMath for uint256;

          mapping(address => uint) public balances;
          mapping(address => uint) public userWithdrawing;

          event ContractExploited(address indexed culprit);

          function ethdeposit(address _to) public payable {
            balances[_to] = balances[_to].add(msg.value);
          }

          function balanceOf(address _who) public view returns (uint balance) {
            return balances[_who];
          }

          function withdraw(uint _amount) public {
            require(_amount <= 0.1 ether, "Withdrawal amount must be less than or equal to 0.1 ether");
            require(balances[msg.sender] >= _amount, "Insufficient balance");
            if (userWithdrawing[msg.sender] <= 1) {
              userWithdrawing[msg.sender] = userWithdrawing[msg.sender] + 1;
            } else {
              userWithdrawing[msg.sender] = 0;
              return;
            }
            (bool result, ) = msg.sender.call{ value: _amount }("");
            require(result, "Withdrawal call failed");
            balances[msg.sender] -= _amount;
            userWithdrawing[msg.sender] = 0;
          }

          receive() external payable {}
        }</code></pre>
      cost: 405
      requirements: null
  tags:
    - value: Web3
    - value: Internet Traffic
- name: Web3 Sandbox
  description: "Find an accidentally deployed code sandbox for writing smart
    contracts on the fly. (Difficulty Level: 1)"
  max_attempts: 0
  value: 100
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 2d33a26f762c318e3defdfaaf79f4b0692d4742a
      data: null
  hints:
    - type: standard
      content: It is just as easy as finding the Score Board.
      cost: 10
      requirements: null
    - type: standard
      content: >-
        <pre><code>const routes: Routes = [
          {
            path: 'administration',
            component: AdministrationComponent,
            canActivate: [AdminGuard]
          },
          {
            path: 'accounting',
            component: AccountingComponent,
            canActivate: [AccountingGuard]
          },
          {
            path: 'about',
            component: AboutComponent
          },
          {
            path: 'address/select',
            component: AddressSelectComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'address/saved',
            component: SavedAddressComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'address/create',
            component: AddressCreateComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'address/edit/:addressId',
            component: AddressCreateComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'delivery-method',
            component: DeliveryMethodComponent
          },
          {
            path: 'deluxe-membership',
            component: DeluxeUserComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'saved-payment-methods',
            component: SavedPaymentMethodsComponent
          },
          {
            path: 'basket',
            component: BasketComponent
          },
          {
            path: 'order-completion/:id',
            component: OrderCompletionComponent
          },
          {
            path: 'contact',
            component: ContactComponent
          },
          {
            path: 'photo-wall',
            component: PhotoWallComponent
          },
          {
            path: 'complain',
            component: ComplaintComponent
          },
          {
            path: 'chatbot',
            component: ChatbotComponent
          },
          {
            path: 'order-summary',
            component: OrderSummaryComponent
          },
          {
            path: 'order-history',
            component: OrderHistoryComponent
          },
          {
            path: 'payment/:entity',
            component: PaymentComponent
          },
          {
            path: 'wallet',
            component: WalletComponent
          },
          {
            path: 'login',
            component: LoginComponent
          },
          {
            path: 'forgot-password',
            component: ForgotPasswordComponent
          },
          {
            path: 'recycle',
            component: RecycleComponent
          },
          {
            path: 'register',
            component: RegisterComponent
          },
          {
            path: 'search',
            component: SearchResultComponent
          },
          {
            path: 'hacking-instructor',
            component: SearchResultComponent
          },
          {
            path: 'score-board',
            component: ScoreBoardComponent
          },
          {
            path: 'track-result',
            component: TrackResultComponent
          },
          {
            path: 'track-result/new',
            component: TrackResultComponent,
            data: {
              type: 'new'
            }
          },
          {
            path: '2fa/enter',
            component: TwoFactorAuthEnterComponent
          },
          {
            path: 'privacy-security',
            component: PrivacySecurityComponent,
            children: [
              {
                path: 'privacy-policy',
                component: PrivacyPolicyComponent
              },
              {
                path: 'change-password',
                component: ChangePasswordComponent
              },
              {
                path: 'two-factor-authentication',
                component: TwoFactorAuthComponent
              },
              {
                path: 'data-export',
                component: DataExportComponent
              },
              {
                path: 'last-login-ip',
                component: LastLoginIpComponent
              }
            ]
          },
          {
            path: 'juicy-nft',
            component: NFTUnlockComponent
          },
          {
            path: 'wallet-web3',
            loadChildren: async () => await loadWeb3WalletModule()
          },
          {
            path: 'web3-sandbox',
            loadChildren: async () => await loadWeb3SandboxtModule()
          },
          {
            path: 'bee-haven',
            loadChildren: async () => await loadFaucetModule()
          },
           {
            matcher: oauthMatcher,
            data: { params: (window.location.href).substr(window.location.href.indexOf('#')) },
            component: OAuthComponent
          },
          {
            matcher: tokenMatcher,
            component: TokenSaleComponent
          },
          {
            path: '403',
            component: ErrorPageComponent
          },
          {
            path: '**',
            component: SearchResultComponent
          }
        ]</code></pre>
      cost: 30
      requirements: null
  tags:
    - value: Web3
- name: Blocked RCE DoS
  description: "Perform a Remote Code Execution that would keep a less hardened
    application busy <em>forever</em>. (Difficulty Level: 5)"
  max_attempts: 0
  value: 1000
  category: Insecure Deserialization
  type: standard
  state: visible
  flags:
    - type: static
      content: daea913e407e04bae3346f375d3e159643b1d3ed
      data: null
  hints:
    - type: standard
      content: The feature you need to exploit for this challenge is not directly
        advertised anywhere.
      cost: 100
      requirements: null
  tags:
    - value: Danger Zone
- name: CAPTCHA Bypass
  description: "Submit 10 or more customer feedbacks within 20 seconds.
    (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: 5ead3c4974ca85bb131a760585d8674b4cd04e38
      data: null
  hints:
    - type: standard
      content: After finding a CAPTCHA bypass, write a script that automates feedback
        submission. Or open many browser tabs and be really quick.
      cost: 45
      requirements: null
  tags:
    - value: Brute Force
- name: Change Bender's Password
  description: "Change Bender's password into <i>slurmCl4ssic</i> without using
    SQL Injection or Forgot Password. (Difficulty Level: 5)"
  max_attempts: 0
  value: 1000
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: adc7159e7dde5bdd71371c9275ec46229dcbd357
      data: null
  hints:
    - type: standard
      content: In previous releases this challenge was wrongly accused of being based
        on CSRF.
      cost: 100
      requirements: null
  tags: []
- name: Christmas Special
  description: "Order the Christmas special offer of 2014. (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 8c8b8a25a20919b9839f4401f767ec51f326396b
      data: null
  hints:
    - type: standard
      content: Find out how the application handles unavailable products and try to
        find a loophole.
      cost: 70
      requirements: null
  tags: []
- name: CSP Bypass
  description: "Bypass the Content Security Policy and perform an XSS attack with
    <code>&lt;script&gt;alert(&#x60;xss&#x60;)&lt;/script&gt;</code> on a legacy
    page within the application. (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: c8ad7ab598c5dd85e01ca9165fda52e0de418cb1
      data: null
  hints:
    - type: standard
      content: What is even "better" than a legacy page with a homegrown RegEx
        sanitizer? Having CSP injection issues on the exact same page as well!
      cost: 70
      requirements: null
  tags:
    - value: Danger Zone
- name: Client-side XSS Protection
  description: 'Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> bypassing a
    <i>client-side</i> security mechanism. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 8918e47f710be95ac5f78ebc63fae5b95e5fc1ea
      data: null
  hints:
    - type: standard
      content: Only some input fields validate their input. Even less of these are
        persisted in a way where their content is shown on another screen.
      cost: 45
      requirements: null
  tags:
    - value: Danger Zone
- name: Confidential Document
  description: "Access a confidential document. (Difficulty Level: 1)"
  max_attempts: 0
  value: 100
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 4217e71411b3ab896d2bac5447d6155deebad3ea
      data: null
  hints:
    - type: standard
      content: Analyze and tamper with links in the application that deliver a file
        directly.
      cost: 10
      requirements: null
    - type: standard
      content: >-
        <pre><code>/* /ftp directory browsing and file download */
          app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))
          app.use('/ftp(?!/quarantine)/:file', fileServer())
          app.use('/ftp/quarantine/:file', quarantineServer())

          app.use('/.well-known', serveIndexMiddleware, serveIndex('.well-known', { icons: true, view: 'details' }))
          app.use('/.well-known', express.static('.well-known'))

          /* /encryptionkeys directory browsing */
          app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))
          app.use('/encryptionkeys/:file', keyServer())

          /* /logs directory browsing */
          app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))
          app.use('/support/logs/:file', logFileServer())

          /* Swagger documentation for B2B v2 endpoints */
          app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument))

          app.use(express.static(path.resolve('frontend/dist/frontend')))
          app.use(cookieParser('kekse'))</code></pre>
      cost: 30
      requirements: null
  tags:
    - value: Good for Demos
- name: DOM XSS
  description: 'Perform a <i>DOM</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code>. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 31510574d76d492e66bc521531ec5479c1e38495
      data: null
  hints:
    - type: standard
      content: Look for an input field where its content appears in the HTML when its
        form is submitted.
      cost: 10
      requirements: null
    - type: standard
      content: >-
        <pre><code>filterTable () {
            let queryParam: string = this.route.snapshot.queryParams.q
            if (queryParam) {
              queryParam = queryParam.trim()
              this.dataSource.filter = queryParam.toLowerCase()
              this.searchValue = this.sanitizer.bypassSecurityTrustHtml(queryParam)
              this.gridDataSource.subscribe((result: any) => {
                if (result.length === 0) {
                  this.emptyState = true
                } else {
                  this.emptyState = false
                }
              })
            } else {
              this.dataSource.filter = ''
              this.searchValue = undefined
              this.emptyState = false
            }
          }</code></pre>
      cost: 30
      requirements: null
  tags:
    - value: Tutorial
    - value: Good for Demos
- name: Database Schema
  description: "Exfiltrate the entire DB schema definition via SQL Injection.
    (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 0522dda86b474f527d4b289a953bdd7a4619622a
      data: null
  hints:
    - type: standard
      content: Find out where this information could come from. Then craft a UNION
        SELECT attack string against an endpoint that offers an unnecessary way
        to filter data.
      cost: 45
      requirements: null
    - type: standard
      content: >-
        <pre><code>module.exports = function searchProducts () {
          return (req: Request, res: Response, next: NextFunction) => {
            let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''
            criteria = (criteria.length <= 200) ? criteria : criteria.substring(0, 200)
            models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)
              .then(([products]: any) => {
                const dataString = JSON.stringify(products)
                for (let i = 0; i < products.length; i++) {
                  products[i].name = req.__(products[i].name)
                  products[i].description = req.__(products[i].description)
                }
                res.json(utils.queryResultToJson(products))
              }).catch((error: ErrorWithParent) => {
                next(error.parent)
              })
          }
        }</code></pre>
      cost: 135
      requirements: null
  tags: []
- name: Deprecated Interface
  description: "Use a deprecated B2B interface that was not properly shut down.
    (Difficulty Level: 2)"
  max_attempts: 0
  value: 250
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: 15bf20445ec9373419455fcf6e9393510ce12fd1
      data: null
  hints:
    - type: standard
      content: The developers who disabled the interface think they could go invisible
        by just closing their eyes.
      cost: 25
      requirements: null
  tags:
    - value: Contraption
    - value: Prerequisite
- name: Easter Egg
  description: 'Find the hidden <a
    href="https://en.wikipedia.org/wiki/Easter_egg_(media)"
    target="_blank">easter egg</a>. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 21a5060351769a116b43b2883f7cfcbb19308f58
      data: null
  hints:
    - type: standard
      content: If you solved one of the three file access challenges, you already know
        where to find the easter egg.
      cost: 70
      requirements: null
  tags:
    - value: Shenanigans
    - value: Contraption
    - value: Good for Demos
- name: Email Leak
  description: "Perform an unwanted information disclosure by accessing data
    cross-domain. (Difficulty Level: 5)"
  max_attempts: 0
  value: 1000
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 79475749d4cdaf88598449a3b2469d89b47af115
      data: null
  hints:
    - type: standard
      content: Try to find and attack an endpoint that responds with user information.
        SQL Injection is not the solution here.
      cost: 100
      requirements: null
  tags: []
- name: Empty User Registration
  description: "Register a user with an empty email and password. (Difficulty Level: 2)"
  max_attempts: 0
  value: 250
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: e51ec5376a494c716385b34aa1604b15ac71037d
      data: null
  hints:
    - type: standard
      content: Consider intercepting and playing with the request payload.
      cost: 25
      requirements: null
  tags: []
- name: Ephemeral Accountant
  description: "Log in with the (non-existing) accountant
    <i>acc0unt4nt@juice-sh.op</i> without ever registering that user.
    (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 74d65bcaec13b720c15e8b92a50ad83910a1a8e4
      data: null
  hints:
    - type: standard
      content: Try to create the needed user "out of thin air".
      cost: 70
      requirements: null
  tags: []
- name: Error Handling
  description: "Provoke an error that is neither very gracefully nor consistently
    handled. (Difficulty Level: 1)"
  max_attempts: 0
  value: 100
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: 332548a99f990353ecaf010e83095ded4df950e0
      data: null
  hints:
    - type: standard
      content: Try to submit bad input to forms. Alternatively tamper with URL paths
        or parameters.
      cost: 10
      requirements: null
  tags:
    - value: Prerequisite
- name: Expired Coupon
  description: "Successfully redeem an expired campaign coupon code. (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: f1c309b3a22c30ad5146c6b070eb7a4bf20c72cd
      data: null
  hints:
    - type: standard
      content: Try to identify past special event or holiday campaigns of the shop
        first.
      cost: 70
      requirements: null
  tags: []
- name: Extra Language
  description: "Retrieve the language file that never made it into production.
    (Difficulty Level: 5)"
  max_attempts: 0
  value: 1000
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: def1b380cd2588c8ab799d667af259ae83f00d61
      data: null
  hints:
    - type: standard
      content: Brute force is not the only option for this challenge, but a perfectly
        viable one.
      cost: 100
      requirements: null
  tags:
    - value: Brute Force
- name: Five-Star Feedback
  description: "Get rid of all 5-star customer feedback. (Difficulty Level: 2)"
  max_attempts: 0
  value: 250
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 43e684a66c3f7d82e7ffb71d1de59c0176dbc1f0
      data: null
  hints:
    - type: standard
      content: Once you found admin section of the application, this challenge is
        almost trivial.
      cost: 25
      requirements: null
  tags: []
- name: Forged Coupon
  description: "Forge a coupon code that gives you a discount of at least 80%.
    (Difficulty Level: 6)"
  max_attempts: 0
  value: 1350
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: 9e0c3a52eb2bd99959715ca496a1b5fe32a897b2
      data: null
  hints:
    - type: standard
      content: Try either a) a knowledgeable brute force attack or b) reverse
        engineering or c) some research in the cloud.
      cost: 135
      requirements: null
  tags:
    - value: Good for Demos
    - value: Code Analysis
- name: Forged Feedback
  description: "Post some feedback in another user's name. (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 12a9ec39f9c36edaf45fc178e1222c085caf9820
      data: null
  hints:
    - type: standard
      content: You can solve this by tampering with the user interface or by
        intercepting the communication with the RESTful backend.
      cost: 45
      requirements: null
  tags:
    - value: Tutorial
- name: Forged Review
  description: "Post a product review as another user or edit any user's existing
    review. (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 465614f8d3b69e871eeed31f622327cbfb61598f
      data: null
  hints:
    - type: standard
      content: Observe the flow of product review posting and editing and see if you
        can exploit it.
      cost: 45
      requirements: null
    - type: standard
      content: >-
        <pre><code>module.exports = function productReviews () {
          return (req: Request, res: Response, next: NextFunction) => {
            const user = security.authenticatedUsers.from(req)
            db.reviewsCollection.update(
              { _id: req.body.id },
              { $set: { message: req.body.message } },
              { multi: true }
            ).then(
              (result: { modified: number, original: Array<{ author: any }> }) => {
                res.json(result)
              }, (err: unknown) => {
                res.status(500).json(err)
              })
          }
        }</code></pre>
      cost: 135
      requirements: null
  tags: []
- name: Forged Signed JWT
  description: "Forge an almost properly RSA-signed JWT token that impersonates
    the (non-existing) user <i>rsa_lord@juice-sh.op</i>. (Difficulty Level: 6)"
  max_attempts: 0
  value: 1350
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 84c5fdefb1be82ddf338fef9aca769a463256002
      data: null
  hints:
    - type: standard
      content: This challenge is explicitly not about acquiring the RSA private key
        used for JWT signing.
      cost: 135
      requirements: null
  tags: []
- name: Forgotten Developer Backup
  description: "Access a developer's forgotten backup file. (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: d1bfcc1a921a12cf21a3759953a335ea8bc4ef9d
      data: null
  hints:
    - type: standard
      content: You need to trick a security mechanism into thinking that the file you
        want has a valid file type.
      cost: 70
      requirements: null
  tags:
    - value: Contraption
    - value: Good for Demos
    - value: Prerequisite
- name: Forgotten Sales Backup
  description: "Access a salesman's forgotten backup file. (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 253fd67bb0fb79d96dc1f5701fbcdacba80ee94a
      data: null
  hints:
    - type: standard
      content: You need to trick a security mechanism into thinking that the file you
        want has a valid file type.
      cost: 70
      requirements: null
  tags:
    - value: Contraption
- name: Frontend Typosquatting
  description: '<a href="/#/contact">Inform the shop</a> about a
    <i>typosquatting</i> imposter that dug itself deep into the frontend.
    (Mention the exact name of the culprit) (Difficulty Level: 5)'
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: f3444b950ab14497a5e2a3cff6973e902619610a
      data: null
  hints:
    - type: standard
      content: This challenge has nothing to do with mistyping web domains. There is
        no conveniently misplaced file helping you with this one either. Or is
        there?
      cost: 100
      requirements: null
  tags: []
- name: GDPR Data Erasure
  description: "Log in with Chris' erased user account. (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 71fd7899f1bd8f71b22574e3a58d776e715a65d9
      data: null
  hints:
    - type: standard
      content: Turns out that something is technically and legally wrong with the
        implementation of the "right to be forgotten" for users.
      cost: 45
      requirements: null
  tags: []
- name: GDPR Data Theft
  description: "Steal someone else's personal data without using Injection.
    (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 22fa93c5b477dff7617020cdd7b13acf9e195204
      data: null
  hints:
    - type: standard
      content: Trick the regular Data Export to give you more than actually belongs to
        you.
      cost: 70
      requirements: null
  tags: []
- name: HTTP-Header XSS
  description: 'Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> through an HTTP header.
    (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 73148792d6b052505d03dfd01da227ef48f0a219
      data: null
  hints:
    - type: standard
      content: Finding a piece of displayed information that could originate from an
        HTTP header is part of this challenge.
      cost: 70
      requirements: null
  tags:
    - value: Danger Zone
- name: Imaginary Challenge
  description: "Solve challenge #999. Unfortunately, this challenge does not
    exist. (Difficulty Level: 6)"
  max_attempts: 0
  value: 1350
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: 1c1a18de59d291058ec1bde4ece5fcac808f64d5
      data: null
  hints:
    - type: standard
      content: "You need to trick the hacking progress persistence feature into
        thinking you solved challenge #999."
      cost: 135
      requirements: null
  tags:
    - value: Shenanigans
    - value: Code Analysis
- name: Leaked Access Logs
  description: "Dumpster dive the Internet for a leaked password and log in to the
    original user account it belongs to. (Creating a new account with the same
    password does not qualify as a solution.) (Difficulty Level: 5)"
  max_attempts: 0
  value: 1000
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 9a9b4c9a1edb1e8aee3a76b37c38d3c2ab365f63
      data: null
  hints:
    - type: standard
      content: Once you have it, a technique called "Password Spraying" might prove
        useful.
      cost: 100
      requirements: null
  tags:
    - value: OSINT
- name: Leaked Unsafe Product
  description: 'Identify an unsafe product that was removed from the shop and <a
    href="/#/contact">inform the shop</a> which ingredients are dangerous.
    (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: e0dd2a5a54ef6d2b7042c421f04c03eca132d511
      data: null
  hints:
    - type: standard
      content: Your own SQLi and someone else's Ctrl-V will be your accomplices in
        this challenge!
      cost: 70
      requirements: null
  tags:
    - value: Shenanigans
    - value: OSINT
- name: Legacy Typosquatting
  description: '<a href="/#/contact">Inform the shop</a> about a
    <i>typosquatting</i> trick it has been a victim of at least in
    <code>v6.2.0-SNAPSHOT</code>. (Mention the exact name of the culprit)
    (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 926641eda9f74cf529005877cefad2454a6a9a0f
      data: null
  hints:
    - type: standard
      content: This challenge has nothing to do with mistyping web domains.
        Investigate the forgotten developer's backup file instead.
      cost: 70
      requirements: null
  tags: []
- name: Login Admin
  description: "Log in with the administrator's user account. (Difficulty Level: 2)"
  max_attempts: 0
  value: 250
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 8d066d39acc8ceef003eaefc586009491cd8a1c7
      data: null
  hints:
    - type: standard
      content: Try different SQL Injection attack patterns depending whether you know
        the admin's email address or not.
      cost: 25
      requirements: null
    - type: standard
      content: >-
        <pre><code>module.exports = function login () {
          function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {
            BasketModel.findOrCreate({ where: { UserId: user.data.id } })
              .then(([basket]: [BasketModel, boolean]) => {
                const token = security.authorize(user)
                user.bid = basket.id // keep track of original basket
                security.authenticatedUsers.put(token, user)
                res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })
              }).catch((error: Error) => {
                next(error)
              })
          }

          return (req: Request, res: Response, next: NextFunction) => {
            models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true })
              .then((authenticatedUser) => {
                const user = utils.queryResultToJson(authenticatedUser)
                if (user.data?.id && user.data.totpSecret !== '') {
                  res.status(401).json({
                    status: 'totp_token_required',
                    data: {
                      tmpToken: security.authorize({
                        userId: user.data.id,
                        type: 'password_valid_needs_second_factor_token'
                      })
                    }
                  })
                } else if (user.data?.id) {
                  afterLogin(user, res, next)
                } else {
                  res.status(401).send(res.__('Invalid email or password.'))
                }
              }).catch((error: Error) => {
                next(error)
              })
          }</code></pre>
      cost: 75
      requirements: null
  tags:
    - value: Tutorial
    - value: Good for Demos
- name: Login Amy
  description: "Log in with Amy's original user credentials. (This could take
    93.83 billion trillion trillion centuries to brute force, but luckily she
    did not read the \"One Important Final Note\") (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: d1a8ca4c5d4b40ab2ad2df225751c05d18e141e7
      data: null
  hints:
    - type: standard
      content: This challenge will make you go after a needle in a haystack.
      cost: 45
      requirements: null
  tags:
    - value: OSINT
- name: Login Bender
  description: "Log in with Bender's user account. (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 650d093fb9b58c9d12671387d25b304b2af53772
      data: null
  hints:
    - type: standard
      content: If you know Bender's email address, try SQL Injection. Bender's
        password hash might not help you very much.
      cost: 45
      requirements: null
    - type: standard
      content: >-
        <pre><code>module.exports = function login () {
          function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {
            BasketModel.findOrCreate({ where: { UserId: user.data.id } })
              .then(([basket]: [BasketModel, boolean]) => {
                const token = security.authorize(user)
                user.bid = basket.id // keep track of original basket
                security.authenticatedUsers.put(token, user)
                res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })
              }).catch((error: Error) => {
                next(error)
              })
          }

          return (req: Request, res: Response, next: NextFunction) => {
            models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true })
              .then((authenticatedUser) => {
                const user = utils.queryResultToJson(authenticatedUser)
                if (user.data?.id && user.data.totpSecret !== '') {
                  res.status(401).json({
                    status: 'totp_token_required',
                    data: {
                      tmpToken: security.authorize({
                        userId: user.data.id,
                        type: 'password_valid_needs_second_factor_token'
                      })
                    }
                  })
                } else if (user.data?.id) {
                  afterLogin(user, res, next)
                } else {
                  res.status(401).send(res.__('Invalid email or password.'))
                }
              }).catch((error: Error) => {
                next(error)
              })
          }</code></pre>
      cost: 135
      requirements: null
  tags:
    - value: Tutorial
- name: Login Bjoern
  description: "Log in with Bjoern's Gmail account <i>without</i> previously
    changing his password, applying SQL Injection, or hacking his Google
    account. (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 5bbbc2b44eb7a8cf046a65e17689dd345235ad43
      data: null
  hints:
    - type: standard
      content: The security flaw behind this challenge is 100% BASC CTF's fault
        and 0% Google's.
      cost: 70
      requirements: null
  tags:
    - value: Code Analysis
- name: Login Jim
  description: "Log in with Jim's user account. (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 062fcf5e4793d0267e1a298d2053de503dc29473
      data: null
  hints:
    - type: standard
      content: Try cracking Jim's password hash if you harvested it already.
        Alternatively, if you know Jim's email address, try SQL Injection.
      cost: 45
      requirements: null
    - type: standard
      content: >-
        <pre><code>module.exports = function login () {
          function afterLogin (user: { data: User, bid: number }, res: Response, next: NextFunction) {
            BasketModel.findOrCreate({ where: { UserId: user.data.id } })
              .then(([basket]: [BasketModel, boolean]) => {
                const token = security.authorize(user)
                user.bid = basket.id // keep track of original basket
                security.authenticatedUsers.put(token, user)
                res.json({ authentication: { token, bid: basket.id, umail: user.data.email } })
              }).catch((error: Error) => {
                next(error)
              })
          }

          return (req: Request, res: Response, next: NextFunction) => {
            models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true })
              .then((authenticatedUser) => {
                const user = utils.queryResultToJson(authenticatedUser)
                if (user.data?.id && user.data.totpSecret !== '') {
                  res.status(401).json({
                    status: 'totp_token_required',
                    data: {
                      tmpToken: security.authorize({
                        userId: user.data.id,
                        type: 'password_valid_needs_second_factor_token'
                      })
                    }
                  })
                } else if (user.data?.id) {
                  afterLogin(user, res, next)
                } else {
                  res.status(401).send(res.__('Invalid email or password.'))
                }
              }).catch((error: Error) => {
                next(error)
              })
          }</code></pre>
      cost: 135
      requirements: null
  tags:
    - value: Tutorial
- name: Login MC SafeSearch
  description: "Log in with MC SafeSearch's original user credentials without
    applying SQL Injection or any other bypass. (Difficulty Level: 2)"
  max_attempts: 0
  value: 250
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 815ece5b46a9260708cb0ead78e526dd0d6cff5f
      data: null
  hints:
    - type: standard
      content: You should listen to MC's hit song "Protect Ya Passwordz".
      cost: 25
      requirements: null
  tags:
    - value: Shenanigans
    - value: OSINT
- name: Login Support Team
  description: "Log in with the support team's original user credentials without
    applying SQL Injection or any other bypass. (Difficulty Level: 6)"
  max_attempts: 0
  value: 1350
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: 1d261e1d8396e19bad69f6957bef42c9ee874e36
      data: null
  hints:
    - type: standard
      content: The underlying flaw of this challenge is a lot more human error than
        technical weakness.
      cost: 135
      requirements: null
  tags:
    - value: Brute Force
    - value: Code Analysis
- name: Manipulate Basket
  description: "Put an additional product into another user's shopping basket.
    (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 408ea1fe893341af0c3bd3e36419c2ccb2be86d8
      data: null
  hints:
    - type: standard
      content: Have an eye on the HTTP traffic while placing products in the shopping
        basket. Changing the quantity of products already in the basket doesn't
        count.
      cost: 45
      requirements: null
  tags: []
- name: Misplaced Signature File
  description: 'Access a misplaced <a href="https://github.com/Neo23x0/sigma">SIEM
    signature</a> file. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 908b67f61b871022073b5f576c79be653e77a6c2
      data: null
  hints:
    - type: standard
      content: You need to trick a security mechanism into thinking that the file you
        want has a valid file type.
      cost: 70
      requirements: null
  tags:
    - value: Good Practice
    - value: Contraption
- name: Multiple Likes
  description: "Like any review at least three times as the same user. (Difficulty
    Level: 6)"
  max_attempts: 0
  value: 1350
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: a31fdba3e53f11da3e53904f55429960ae7a520f
      data: null
  hints:
    - type: standard
      content: Punctuality is the politeness of kings.
      cost: 135
      requirements: null
  tags: []
- name: Nested Easter Egg
  description: "Apply some advanced cryptanalysis to find <i>the real</i> easter
    egg. (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: db08e7e0e0d142d1e824dc54ba08cd6eda381b8b
      data: null
  hints:
    - type: standard
      content: You might have to peel through several layers of tough-as-nails
        encryption for this challenge.
      cost: 70
      requirements: null
  tags:
    - value: Shenanigans
    - value: Good for Demos
- name: NoSQL DoS
  description: "Let the server sleep for some time. (It has done more than enough
    hard work for you) (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: f327652669253f2d46b1cb5faf5161744ce266bc
      data: null
  hints:
    - type: standard
      content: This challenge is essentially a stripped-down Denial of Service (DoS)
        attack.
      cost: 70
      requirements: null
  tags:
    - value: Danger Zone
- name: NoSQL Exfiltration
  description: "All your orders are belong to us! Even the ones which don't.
    (Difficulty Level: 5)"
  max_attempts: 0
  value: 1000
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 01e799a7fe8e69209f1f6c60c2aa70111a2593e3
      data: null
  hints:
    - type: standard
      content: Take a close look on how the $where query operator works in MongoDB.
      cost: 100
      requirements: null
  tags:
    - value: Danger Zone
- name: NoSQL Manipulation
  description: "Update multiple product reviews at the same time. (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 5729015e8b13143796a1b1c523ac0928e45ed0cd
      data: null
  hints:
    - type: standard
      content: Take a close look on how the equivalent of UPDATE-statements in MongoDB
        work.
      cost: 70
      requirements: null
    - type: standard
      content: >-
        <pre><code>module.exports = function productReviews () {
          return (req: Request, res: Response, next: NextFunction) => {
            const user = security.authenticatedUsers.from(req)
            db.reviewsCollection.update(
              { _id: req.body.id },
              { $set: { message: req.body.message } },
              { multi: true }
            ).then(
              (result: { modified: number, original: Array<{ author: any }> }) => {
                res.json(result)
              }, (err: unknown) => {
                res.status(500).json(err)
              })
          }
        }</code></pre>
      cost: 210
      requirements: null
  tags: []
- name: Outdated Allowlist
  description: "Let us redirect you to one of our crypto currency addresses which
    are not promoted any longer. (Difficulty Level: 1)"
  max_attempts: 0
  value: 100
  category: Unvalidated Redirects
  type: standard
  state: visible
  flags:
    - type: static
      content: a862b82bea0ddd875a18e6c71a4e7fed4fc64df6
      data: null
  hints:
    - type: standard
      content: We might have failed to take this out of our code properly.
      cost: 10
      requirements: null
    - type: standard
      content: >-
        <pre><code>export const redirectAllowlist = new Set([
          'https://github.com/juice-shop/juice-shop',
          'https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm',
          'https://explorer.dash.org/address/Xr556RzuwX6hg5EGpkybbv5RanJoZN17kW',
          'https://etherscan.io/address/0x0f933ab9fcaaa782d0279c300d73750e1311eae6',
          'http://shop.spreadshirt.com/juiceshop',
          'http://shop.spreadshirt.de/juiceshop',
          'https://www.stickeryou.com/products/owasp-juice-shop/794',
          'http://leanpub.com/juice-shop'
        ])


        export const isRedirectAllowed = (url: string) => {
          let allowed = false
          for (const allowedUrl of redirectAllowlist) {
            allowed = allowed || url.includes(allowedUrl)
          }
          return allowed
        }</code></pre>
      cost: 30
      requirements: null
  tags:
    - value: Code Analysis
- name: Password Strength
  description: "Log in with the administrator's user credentials without
    previously changing them or applying SQL Injection. (Difficulty Level: 2)"
  max_attempts: 0
  value: 250
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 12a814dfefb0d23883dc5f15ccf5c593bb2db9e6
      data: null
  hints:
    - type: standard
      content: This one should be equally easy to a) brute force, b) crack the
        password hash or c) simply guess.
      cost: 25
      requirements: null
    - type: standard
      content: >-
        <pre><code>User.init(
              password: {
                type: DataTypes.STRING,
                set (clearTextPassword: string) {
                  this.setDataValue('password', security.hash(clearTextPassword))
                }
              },</code></pre>
      cost: 75
      requirements: null
  tags:
    - value: Brute Force
    - value: Tutorial
- name: Payback Time
  description: "Place an order that makes you rich. (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: d9add4137804bb28ba64db36565bc480bc4371b2
      data: null
  hints:
    - type: standard
      content: You literally need to make the shop owe you any amount of money.
      cost: 45
      requirements: null
  tags: []
- name: Premium Paywall
  description: '<i class="far fa-gem"></i><i class="far fa-gem"></i><i class="far
    fa-gem"></i><i class="far fa-gem"></i><i class="far
    fa-gem"></i><!--IvLuRfBJYlmStf9XfL6ckJFngyd9LfV1JaaN/KRTPQPidTuJ7FR+D/nkWJUF+0xUF07CeCeqYfxq+OJVVa0gNbqgYkUNvn//UbE7e95C+6e+7GtdpqJ8mqm4WcPvUGIUxmGLTTAC2+G9UuFCD1DUjg==-->
    <a href="https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm"
    target="_blank"><i class="fab fa-btc fa-sm"></i> Unlock Premium
    Challenge</a> to access exclusive content. (Difficulty Level: 6)'
  max_attempts: 0
  value: 1350
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: dd9e7a62f5465ceb4777fb2d1314e2c89ac20e98
      data: null
  hints:
    - type: standard
      content: You do not have to pay anything to unlock this challenge! Nonetheless,
        donations are very much appreciated.
      cost: 135
      requirements: null
  tags:
    - value: Shenanigans
- name: Privacy Policy
  description: "Read our privacy policy. (Difficulty Level: 1)"
  max_attempts: 0
  value: 100
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: 0f586e9b89ab5ea3da88b214ed59edd6ee6e3a9e
      data: null
  hints:
    - type: standard
      content: We won't even ask you to confirm that you did. Just read it. Please.
        Pretty please.
      cost: 10
      requirements: null
  tags:
    - value: Good Practice
    - value: Tutorial
    - value: Good for Demos
- name: Privacy Policy Inspection
  description: "Prove that you actually read our privacy policy. (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Security through Obscurity
  type: standard
  state: visible
  flags:
    - type: static
      content: 6fc5eaefba8459a46305398be954cddb823b92fd
      data: null
  hints:
    - type: standard
      content: Only by visiting a special URL you can confirm that you read it
        carefully.
      cost: 45
      requirements: null
  tags:
    - value: Shenanigans
    - value: Good for Demos
- name: Product Tampering
  description: 'Change the <code>href</code> of the link within the <a
    href="/#/search?q=OWASP SSL Advanced Forensic Tool (O-Saft)">OWASP SSL
    Advanced Forensic Tool (O-Saft)</a> product description into
    <i>https://owasp.slack.com</i>. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 8640d63c7505f697f1d89ef7d63294bcd913249f
      data: null
  hints:
    - type: standard
      content: "Look for one of the following: a) broken admin functionality, b) holes
        in RESTful API or c) possibility for SQL Injection."
      cost: 45
      requirements: null
    - type: standard
      content: >-
        <pre><code>/** Authorization **/
          /* Baskets: Unauthorized users are not allowed to access baskets */
          app.use('/rest/basket', security.isAuthorized(), security.appendUserId())
          /* BasketItems: API only accessible for authenticated users */
          app.use('/api/BasketItems', security.isAuthorized())
          app.use('/api/BasketItems/:id', security.isAuthorized())
          /* Feedbacks: GET allowed for feedback carousel, POST allowed in order to provide feedback without being logged in */
          app.use('/api/Feedbacks/:id', security.isAuthorized())
          /* Users: Only POST is allowed in order to register a new user */
          app.get('/api/Users', security.isAuthorized())
          app.route('/api/Users/:id')
            .get(security.isAuthorized())
            .put(security.denyAll())
            .delete(security.denyAll())
          /* Products: Only GET is allowed in order to view products */
          app.post('/api/Products', security.isAuthorized())
          // app.put('/api/Products/:id', security.isAuthorized())
          app.delete('/api/Products/:id', security.denyAll())
          /* Challenges: GET list of challenges allowed. Everything else forbidden entirely */
          app.post('/api/Challenges', security.denyAll())
          app.use('/api/Challenges/:id', security.denyAll())
          /* Complaints: POST and GET allowed when logged in only */
          app.get('/api/Complaints', security.isAuthorized())
          app.post('/api/Complaints', security.isAuthorized())
          app.use('/api/Complaints/:id', security.denyAll())
          /* Recycles: POST and GET allowed when logged in only */
          app.get('/api/Recycles', recycles.blockRecycleItems())
          app.post('/api/Recycles', security.isAuthorized())
          /* Challenge evaluation before finale takes over */
          app.get('/api/Recycles/:id', recycles.getRecycleItem())
          app.put('/api/Recycles/:id', security.denyAll())
          app.delete('/api/Recycles/:id', security.denyAll())
          /* SecurityQuestions: Only GET list of questions allowed. */
          app.post('/api/SecurityQuestions', security.denyAll())
          app.use('/api/SecurityQuestions/:id', security.denyAll())
          /* SecurityAnswers: Only POST of answer allowed. */
          app.get('/api/SecurityAnswers', security.denyAll())
          app.use('/api/SecurityAnswers/:id', security.denyAll())
          /* REST API */
          app.use('/rest/user/authentication-details', security.isAuthorized())
          app.use('/rest/basket/:id', security.isAuthorized())
          app.use('/rest/basket/:id/order', security.isAuthorized())
          app.post('/api/Users', verify.emptyUserRegistration())
          /* Unauthorized users are not allowed to access B2B API */
          app.use('/b2b/v2', security.isAuthorized())
          /* Check if the quantity is available in stock and limit per user not exceeded, then add item to basket */
          app.put('/api/BasketItems/:id', security.appendUserId(), basketItems.quantityCheckBeforeBasketItemUpdate())
          app.post('/api/BasketItems', security.appendUserId(), basketItems.quantityCheckBeforeBasketItemAddition(), basketItems.addBasketItem())
          /* Accounting users are allowed to check and update quantities */
          app.delete('/api/Quantitys/:id', security.denyAll())
          app.post('/api/Quantitys', security.denyAll())
          app.use('/api/Quantitys/:id', security.isAccounting(), ipfilter(['123.456.789'], { mode: 'allow' }))
          /* Feedbacks: Do not allow changes of existing feedback */
          app.put('/api/Feedbacks/:id', security.denyAll())
          /* PrivacyRequests: Only allowed for authenticated users */
          app.use('/api/PrivacyRequests', security.isAuthorized())
          app.use('/api/PrivacyRequests/:id', security.isAuthorized())
          /* PaymentMethodRequests: Only allowed for authenticated users */
          app.post('/api/Cards', security.appendUserId())
          app.get('/api/Cards', security.appendUserId(), payment.getPaymentMethods())
          app.put('/api/Cards/:id', security.denyAll())
          app.delete('/api/Cards/:id', security.appendUserId(), payment.delPaymentMethodById())
          app.get('/api/Cards/:id', security.appendUserId(), payment.getPaymentMethodById())
          /* PrivacyRequests: Only POST allowed for authenticated users */
          app.post('/api/PrivacyRequests', security.isAuthorized())
          app.get('/api/PrivacyRequests', security.denyAll())
          app.use('/api/PrivacyRequests/:id', security.denyAll())

          app.post('/api/Addresss', security.appendUserId())
          app.get('/api/Addresss', security.appendUserId(), address.getAddress())
          app.put('/api/Addresss/:id', security.appendUserId())
          app.delete('/api/Addresss/:id', security.appendUserId(), address.delAddressById())
          app.get('/api/Addresss/:id', security.appendUserId(), address.getAddressById())
          app.get('/api/Deliverys', delivery.getDeliveryMethods())
          app.get('/api/Deliverys/:id', delivery.getDeliveryMethod())</code></pre>
      cost: 135
      requirements: null
  tags: []
- name: Reflected XSS
  description: 'Perform a <i>reflected</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code>. (Difficulty Level: 2)'
  max_attempts: 0
  value: 250
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 408c7a1263d8a73834c50358377b48acf3647d97
      data: null
  hints:
    - type: standard
      content: Look for a url parameter where its value appears in the page it is
        leading to.
      cost: 25
      requirements: null
  tags:
    - value: Tutorial
    - value: Danger Zone
    - value: Good for Demos
- name: Repetitive Registration
  description: "Follow the DRY principle while registering a user. (Difficulty Level: 1)"
  max_attempts: 0
  value: 100
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: b2c91a2ff3a45aba07fea15da16b2d8afdc1ad4f
      data: null
  hints:
    - type: standard
      content: You can solve this by cleverly interacting with the UI or bypassing it
        altogether.
      cost: 10
      requirements: null
  tags: []
- name: Reset Bender's Password
  description: "Reset Bender's password via the <a
    href=\"/#/forgot-password\">Forgot Password</a> mechanism with <i>the
    original answer</i> to his security question. (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 4adfb3476c9f9cfcb3c566f6426d288d6c1b4f83
      data: null
  hints:
    - type: standard
      content: Not as trivial as Jim's but still not too difficult with some
        "Futurama" background knowledge.
      cost: 70
      requirements: null
    - type: standard
      content: >-
        <pre><code>-
          question: 'Your eldest siblings middle name?'
        -
          question: "Mother's maiden name?"
        -
          question: "Mother's birth date? (MM/DD/YY)"
        -
          question: "Father's birth date? (MM/DD/YY)"
        -
          question: "Maternal grandmother's first name?"
        -
          question: "Paternal grandmother's first name?"
        -
          question: 'Name of your favorite pet?'
        -
          question: "Last name of dentist when you were a teenager? (Do not include 'Dr.')"
        -
          question: 'Your ZIP/postal code when you were a teenager?'
        -
          question: 'Company you first work for as an adult?'
        -
          question: 'Your favorite book?'
        -
          question: 'Your favorite movie?'
        -
          question: 'Number of one of your customer or ID cards?'
        -
          question: "What's your favorite place to go hiking?"</code></pre>
      cost: 210
      requirements: null
  tags:
    - value: OSINT
- name: Reset Bjoern's Password
  description: "Reset the password of Bjoern's internal account via the <a
    href=\"/#/forgot-password\">Forgot Password</a> mechanism with <i>the
    original answer</i> to his security question. (Difficulty Level: 5)"
  max_attempts: 0
  value: 1000
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: a3a568dd02f8cecce28ca6a88a67a8e4cd3c11b3
      data: null
  hints:
    - type: standard
      content: Nothing a little bit of Facebook stalking couldn't reveal. Might
        involve a historical twist.
      cost: 100
      requirements: null
    - type: standard
      content: >-
        <pre><code>-
          question: 'Your eldest siblings middle name?'
        -
          question: "Mother's maiden name?"
        -
          question: "Mother's birth date? (MM/DD/YY)"
        -
          question: "Father's birth date? (MM/DD/YY)"
        -
          question: "Maternal grandmother's first name?"
        -
          question: "Paternal grandmother's first name?"
        -
          question: 'Name of your favorite pet?'
        -
          question: "Last name of dentist when you were a teenager? (Do not include 'Dr.')"
        -
          question: 'Your ZIP/postal code when you were a teenager?'
        -
          question: 'Company you first work for as an adult?'
        -
          question: 'Your favorite book?'
        -
          question: 'Your favorite movie?'
        -
          question: 'Number of one of your customer or ID cards?'
        -
          question: "What's your favorite place to go hiking?"</code></pre>
      cost: 300
      requirements: null
  tags:
    - value: OSINT
- name: Reset Jim's Password
  description: "Reset Jim's password via the <a href=\"/#/forgot-password\">Forgot
    Password</a> mechanism with <i>the original answer</i> to his security
    question. (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: af195a151ae9b16258489535514c5fa13329e724
      data: null
  hints:
    - type: standard
      content: It's hard for celebrities to pick a security question from a hard-coded
        list where the answer is not publicly exposed.
      cost: 45
      requirements: null
    - type: standard
      content: >-
        <pre><code>-
          question: 'Your eldest siblings middle name?'
        -
          question: "Mother's maiden name?"
        -
          question: "Mother's birth date? (MM/DD/YY)"
        -
          question: "Father's birth date? (MM/DD/YY)"
        -
          question: "Maternal grandmother's first name?"
        -
          question: "Paternal grandmother's first name?"
        -
          question: 'Name of your favorite pet?'
        -
          question: "Last name of dentist when you were a teenager? (Do not include 'Dr.')"
        -
          question: 'Your ZIP/postal code when you were a teenager?'
        -
          question: 'Company you first work for as an adult?'
        -
          question: 'Your favorite book?'
        -
          question: 'Your favorite movie?'
        -
          question: 'Number of one of your customer or ID cards?'
        -
          question: "What's your favorite place to go hiking?"</code></pre>
      cost: 135
      requirements: null
  tags:
    - value: OSINT
- name: Reset Morty's Password
  description: "Reset Morty's password via the <a
    href=\"/#/forgot-password\">Forgot Password</a> mechanism with <i>his
    obfuscated answer</i> to his security question. (Difficulty Level: 5)"
  max_attempts: 0
  value: 1000
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: facf10b4af0069e7fbd10765fce76a91865b65e7
      data: null
  hints:
    - type: standard
      content: Find a way to bypass the rate limiting and brute force the obfuscated
        answer to Morty's security question.
      cost: 100
      requirements: null
    - type: standard
      content: >-
        <pre><code>/* Rate limiting */
          app.enable('trust proxy')
          app.use('/rest/user/reset-password', new RateLimit({
            windowMs: 5 * 60 * 1000,
            max: 100,
            keyGenerator ({ headers, ip }: { headers: any, ip: any }) { return headers['X-Forwarded-For'] ?? ip }
          }))</code></pre>
      cost: 300
      requirements: null
  tags:
    - value: OSINT
    - value: Brute Force
- name: Retrieve Blueprint
  description: "Deprive the shop of earnings by downloading the blueprint for one
    of its products. (Difficulty Level: 5)"
  max_attempts: 0
  value: 1000
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 1e3656eb98dd7dc7a998563d49c722fdc4664933
      data: null
  hints:
    - type: standard
      content: The product you might want to give a closer look is the OWASP Juice
        Shop Logo (3D-printed).
      cost: 100
      requirements: null
  tags: []
- name: SSRF
  description: "Request a hidden resource on server through server. (Difficulty Level: 6)"
  max_attempts: 0
  value: 1350
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 48dddabcf9797999c1bc2d028b939e4a732d8308
      data: null
  hints:
    - type: standard
      content: Reverse engineering something bad can make good things happen.
      cost: 135
      requirements: null
  tags:
    - value: Code Analysis
- name: SSTi
  description: "Infect the server with juicy malware by abusing arbitrary command
    execution. (Difficulty Level: 6)"
  max_attempts: 0
  value: 1350
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 6ae195bd8048906e78a5dec38cca17a449a6694d
      data: null
  hints:
    - type: standard
      content: '"SSTi" is a clear indicator that this has nothing to do with anything
        Angular. Also, make sure to use only our non-malicious malware.'
      cost: 135
      requirements: null
  tags:
    - value: Contraption
    - value: Danger Zone
    - value: Code Analysis
- name: Score Board
  description: "Find the carefully hidden 'Score Board' page. (Difficulty Level: 1)"
  max_attempts: 0
  value: 100
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: 03066e855def4e0bf2b9460dee5c72890a5f686c
      data: null
  hints:
    - type: standard
      content: Try to find a reference or clue behind the scenes. Or simply guess what
        URL the Score Board might have.
      cost: 10
      requirements: null
    - type: standard
      content: >-
        <pre><code>const routes: Routes = [
          {
            path: 'administration',
            component: AdministrationComponent,
            canActivate: [AdminGuard]
          },
          {
            path: 'accounting',
            component: AccountingComponent,
            canActivate: [AccountingGuard]
          },
          {
            path: 'about',
            component: AboutComponent
          },
          {
            path: 'address/select',
            component: AddressSelectComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'address/saved',
            component: SavedAddressComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'address/create',
            component: AddressCreateComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'address/edit/:addressId',
            component: AddressCreateComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'delivery-method',
            component: DeliveryMethodComponent
          },
          {
            path: 'deluxe-membership',
            component: DeluxeUserComponent,
            canActivate: [LoginGuard]
          },
          {
            path: 'saved-payment-methods',
            component: SavedPaymentMethodsComponent
          },
          {
            path: 'basket',
            component: BasketComponent
          },
          {
            path: 'order-completion/:id',
            component: OrderCompletionComponent
          },
          {
            path: 'contact',
            component: ContactComponent
          },
          {
            path: 'photo-wall',
            component: PhotoWallComponent
          },
          {
            path: 'complain',
            component: ComplaintComponent
          },
          {
            path: 'chatbot',
            component: ChatbotComponent
          },
          {
            path: 'order-summary',
            component: OrderSummaryComponent
          },
          {
            path: 'order-history',
            component: OrderHistoryComponent
          },
          {
            path: 'payment/:entity',
            component: PaymentComponent
          },
          {
            path: 'wallet',
            component: WalletComponent
          },
          {
            path: 'login',
            component: LoginComponent
          },
          {
            path: 'forgot-password',
            component: ForgotPasswordComponent
          },
          {
            path: 'recycle',
            component: RecycleComponent
          },
          {
            path: 'register',
            component: RegisterComponent
          },
          {
            path: 'search',
            component: SearchResultComponent
          },
          {
            path: 'hacking-instructor',
            component: SearchResultComponent
          },
          {
            path: 'score-board',
            component: ScoreBoardComponent
          },
          {
            path: 'track-result',
            component: TrackResultComponent
          },
          {
            path: 'track-result/new',
            component: TrackResultComponent,
            data: {
              type: 'new'
            }
          },
          {
            path: '2fa/enter',
            component: TwoFactorAuthEnterComponent
          },
          {
            path: 'privacy-security',
            component: PrivacySecurityComponent,
            children: [
              {
                path: 'privacy-policy',
                component: PrivacyPolicyComponent
              },
              {
                path: 'change-password',
                component: ChangePasswordComponent
              },
              {
                path: 'two-factor-authentication',
                component: TwoFactorAuthComponent
              },
              {
                path: 'data-export',
                component: DataExportComponent
              },
              {
                path: 'last-login-ip',
                component: LastLoginIpComponent
              }
            ]
          },
          {
            path: 'juicy-nft',
            component: NFTUnlockComponent
          },
          {
            path: 'wallet-web3',
            loadChildren: async () => await loadWeb3WalletModule()
          },
          {
            path: 'web3-sandbox',
            loadChildren: async () => await loadWeb3SandboxtModule()
          },
          {
            path: 'bee-haven',
            loadChildren: async () => await loadFaucetModule()
          },
           {
            matcher: oauthMatcher,
            data: { params: (window.location.href).substr(window.location.href.indexOf('#')) },
            component: OAuthComponent
          },
          {
            matcher: tokenMatcher,
            component: TokenSaleComponent
          },
          {
            path: '403',
            component: ErrorPageComponent
          },
          {
            path: '**',
            component: SearchResultComponent
          }
        ]</code></pre>
      cost: 30
      requirements: null
  tags:
    - value: Tutorial
    - value: Code Analysis
- name: Security Policy
  description: 'Behave like any "white-hat" should before getting into the action.
    (Difficulty Level: 2)'
  max_attempts: 0
  value: 250
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: b031e2b2057fe0a15ce05944f316f33bcdcff454
      data: null
  hints:
    - type: standard
      content: Undoubtedly you want to read our security policy before conducting any
        research on our application.
      cost: 25
      requirements: null
  tags:
    - value: Good Practice
- name: Server-side XSS Protection
  description: 'Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> bypassing a
    <i>server-side</i> security mechanism. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 2138c03693a60812dfe67182c73f60c6aead06d2
      data: null
  hints:
    - type: standard
      content: The "Comment" field in the "Customer Feedback" screen is where you want
        to put your focus on.
      cost: 70
      requirements: null
  tags:
    - value: Danger Zone
- name: Steganography
  description: '<a href="/#/contact">Rat out</a> a notorious character hiding in
    plain sight in the shop. (Mention the exact name of the character)
    (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Security through Obscurity
  type: standard
  state: visible
  flags:
    - type: static
      content: e5f94924325809ac80030b836751f36ae4e71044
      data: null
  hints:
    - type: standard
      content: No matter how good your eyes are, you will need tool assistance for
        this challenge.
      cost: 70
      requirements: null
  tags:
    - value: Shenanigans
- name: Successful RCE DoS
  description: "Perform a Remote Code Execution that occupies the server for a
    while without using infinite loops. (Difficulty Level: 6)"
  max_attempts: 0
  value: 1350
  category: Insecure Deserialization
  type: standard
  state: visible
  flags:
    - type: static
      content: 63c8e10c1902fee711b047e16826430fc640005b
      data: null
  hints:
    - type: standard
      content: Your attack payload must not trigger the protection against too many
        iterations.
      cost: 135
      requirements: null
  tags:
    - value: Danger Zone
- name: Supply Chain Attack
  description: '<a href="/#/contact">Inform the development team</a> about a
    danger to some of <em>their</em> credentials. (Send them the URL of the
    <em>original report</em> or an assigned CVE or another identifier of this
    vulnerability) (Difficulty Level: 5)'
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: cdfd03d9986ce5d3f7dc30a936f36eab22b8186c
      data: null
  hints:
    - type: standard
      content: This vulnerability will not affect any customer of the shop. It is
        aimed exclusively at its developers.
      cost: 100
      requirements: null
  tags:
    - value: OSINT
- name: Two Factor Authentication
  description: 'Solve the 2FA challenge for user "wurstbrot". (Disabling,
    bypassing or overwriting his 2FA settings does not count as a solution)
    (Difficulty Level: 5)'
  max_attempts: 0
  value: 1000
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 10b2d016c1f18ed5428b63a443edbc20a2a62675
      data: null
  hints:
    - type: standard
      content: The 2FA implementation requires to store a secret for every user. You
        will need to find a way to access this secret in order to solve this
        challenge.
      cost: 100
      requirements: null
  tags: []
- name: Unsigned JWT
  description: "Forge an essentially unsigned JWT token that impersonates the
    (non-existing) user <i>jwtn3d@juice-sh.op</i>. (Difficulty Level: 5)"
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 4c97daa63a8ec7e8f0645bcae092880b26b61486
      data: null
  hints:
    - type: standard
      content: This challenge exploits a weird option that is supported when signing
        tokens with JWT.
      cost: 100
      requirements: null
  tags: []
- name: Upload Size
  description: "Upload a file larger than 100 kB. (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 2a4addcbe43e3fb2add831129d564fd23b432338
      data: null
  hints:
    - type: standard
      content: You can attach a small file to the "Complaint" form. Investigate how
        this upload actually works.
      cost: 45
      requirements: null
  tags: []
- name: Upload Type
  description: "Upload a file that has no .pdf or .zip extension. (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: ece560c033ef3c1190677db55147faafb766be3c
      data: null
  hints:
    - type: standard
      content: You can attach a PDF or ZIP file to the "Complaint" form. Investigate
        how this upload actually works.
      cost: 45
      requirements: null
  tags: []
- name: User Credentials
  description: "Retrieve a list of all user credentials via SQL Injection.
    (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 578dbdca447aca7b5fb514bc51e655c3187d6e24
      data: null
  hints:
    - type: standard
      content: Gather information on where user data is stored and how it is
        addressed. Then craft a corresponding UNION SELECT attack.
      cost: 70
      requirements: null
    - type: standard
      content: >-
        <pre><code>module.exports = function searchProducts () {
          return (req: Request, res: Response, next: NextFunction) => {
            let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''
            criteria = (criteria.length <= 200) ? criteria : criteria.substring(0, 200)
            models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)
              .then(([products]: any) => {
                const dataString = JSON.stringify(products)
                for (let i = 0; i < products.length; i++) {
                  products[i].name = req.__(products[i].name)
                  products[i].description = req.__(products[i].description)
                }
                res.json(utils.queryResultToJson(products))
              }).catch((error: ErrorWithParent) => {
                next(error.parent)
              })
          }
        }</code></pre>
      cost: 210
      requirements: null
  tags: []
- name: Video XSS
  description: "Embed an XSS payload
    <code>&lt;/script&gt;&lt;script&gt;alert(&#x60;xss&#x60;)&lt;/script&gt;</c\
    ode> into our promo video. (Difficulty Level: 6)"
  max_attempts: 0
  value: 1350
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 49ce8c0394d7a89d73cbe492b5af825aac8a6925
      data: null
  hints:
    - type: standard
      content: You have to reuse the vulnerability behind one other 6-star challenge
        to be able to solve this one.
      cost: 135
      requirements: null
  tags:
    - value: Danger Zone
- name: View Basket
  description: "View another user's shopping basket. (Difficulty Level: 2)"
  max_attempts: 0
  value: 250
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: b41cb1d0babfff87c02e4acfa73bdf71899fff35
      data: null
  hints:
    - type: standard
      content: Have an eye on the HTTP traffic while shopping. Alternatively try to
        find a client-side association of users to their basket.
      cost: 25
      requirements: null
  tags:
    - value: Tutorial
    - value: Good for Demos
- name: Vulnerable Library
  description: '<a href="/#/contact">Inform the shop</a> about a vulnerable
    library it is using. (Mention the exact library name and version in your
    comment) (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: ff99114214f0ac365a34107ce28576567cd1740f
      data: null
  hints:
    - type: standard
      content: Report one of two possible answers via the "Customer Feedback" form. Do
        not forget to submit the library's version as well.
      cost: 70
      requirements: null
  tags:
    - value: OSINT
- name: Weird Crypto
  description: '<a href="/#/contact">Inform the shop</a> about an algorithm or
    library it should definitely not use the way it does. (Difficulty Level: 2)'
  max_attempts: 0
  value: 250
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: d774c8fe8491a7905110b3eba3f28b008ae707ed
      data: null
  hints:
    - type: standard
      content: Report one of four possible answers via the "Customer Feedback" form.
      cost: 25
      requirements: null
  tags: []
- name: Allowlist Bypass
  description: "Enforce a redirect to a page you are not supposed to redirect to.
    (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: Unvalidated Redirects
  type: standard
  state: visible
  flags:
    - type: static
      content: b4c6801358183a9bacafe477997ab945f92912b0
      data: null
  hints:
    - type: standard
      content: You have to find a way to beat the allowlist of allowed redirect URLs.
      cost: 70
      requirements: null
    - type: standard
      content: >-
        <pre><code>export const redirectAllowlist = new Set([
          'https://github.com/juice-shop/juice-shop',
          'https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm',
          'https://explorer.dash.org/address/Xr556RzuwX6hg5EGpkybbv5RanJoZN17kW',
          'https://etherscan.io/address/0x0f933ab9fcaaa782d0279c300d73750e1311eae6',
          'http://shop.spreadshirt.com/juiceshop',
          'http://shop.spreadshirt.de/juiceshop',
          'https://www.stickeryou.com/products/owasp-juice-shop/794',
          'http://leanpub.com/juice-shop'
        ])


        export const isRedirectAllowed = (url: string) => {
          let allowed = false
          for (const allowedUrl of redirectAllowlist) {
            allowed = allowed || url.includes(allowedUrl)
          }
          return allowed
        }</code></pre>
      cost: 210
      requirements: null
  tags:
    - value: Prerequisite
- name: XXE Data Access
  description: "Retrieve the content of <code>C:\\Windows\\system.ini</code> or
    <code>/etc/passwd</code> from the server. (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: XXE
  type: standard
  state: visible
  flags:
    - type: static
      content: 62c6486a77f49400212ae7ce004a2388b31bb44d
      data: null
  hints:
    - type: standard
      content: The leverage point for this challenge is the deprecated B2B interface.
      cost: 45
      requirements: null
  tags:
    - value: Danger Zone
- name: XXE DoS
  description: "Give the server something to chew on for quite a while.
    (Difficulty Level: 5)"
  max_attempts: 0
  value: 1000
  category: XXE
  type: standard
  state: visible
  flags:
    - type: static
      content: 1c11991295d035f86c266c5f59bf4e02897cffeb
      data: null
  hints:
    - type: standard
      content: It is not as easy as sending a large amount of data directly to the
        deprecated B2B interface.
      cost: 100
      requirements: null
  tags:
    - value: Danger Zone
- name: Zero Stars
  description: "Give a devastating zero-star feedback to the store. (Difficulty Level: 1)"
  max_attempts: 0
  value: 100
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 69103c7bc85870707a84ae8fd83bf31e0b0594d2
      data: null
  hints:
    - type: standard
      content: Before you invest time bypassing the API, you might want to play around
        with the UI a bit.
      cost: 10
      requirements: null
  tags: []
- name: Missing Encoding
  description: "Retrieve the photo of Bjoern's cat in \"melee combat-mode\".
    (Difficulty Level: 1)"
  max_attempts: 0
  value: 100
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: ab6de2d5a3491d162d135e71bfaeb8a20a8ca762
      data: null
  hints:
    - type: standard
      content: Check the Photo Wall for an image that could not be loaded correctly.
      cost: 10
      requirements: null
  tags:
    - value: Shenanigans
- name: Cross-Site Imaging
  description: 'Stick <a href="http://placekitten.com/" target="_blank">cute
    cross-domain kittens</a> all over our delivery boxes. (Difficulty Level: 5)'
  max_attempts: 0
  value: 1000
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: 539d0924dab83877fcdd73e89d2101a8710b1119
      data: null
  hints:
    - type: standard
      content: This challenge would formally have to be in several categories as the
        developers made multiple gaffes for this to be possible.
      cost: 100
      requirements: null
  tags:
    - value: Contraption
- name: Exposed Metrics
  description: 'Find the endpoint that serves usage data to be scraped by a <a
    href="https://github.com/prometheus/prometheus">popular monitoring
    system</a>. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: cf31ea6b32ff325ec95821009f263251038f325b
      data: null
  hints:
    - type: standard
      content: Try to guess what URL the endpoint might have.
      cost: 10
      requirements: null
    - type: standard
      content: >-
        <pre><code>/* Serve metrics */

        let metricsUpdateLoop: any

        const Metrics = metrics.observeMetrics()

        app.get('/metrics', metrics.serveMetrics())

        errorhandler.title = `${config.get<string>('application.name')} (Express
        ${utils.version('express')})`


        export async function start (readyCallback?: () => void) {
          const datacreatorEnd = startupGauge.startTimer({ task: 'datacreator' })
          await sequelize.sync({ force: true })
          await datacreator()
          datacreatorEnd()
          const port = process.env.PORT ?? config.get('server.port')
          process.env.BASE_PATH = process.env.BASE_PATH ?? config.get('server.basePath')

          metricsUpdateLoop = Metrics.updateLoop()

          server.listen(port, () => {
            logger.info(colors.cyan(`Server listening on port ${colors.bold(`${port}`)}`))
            startupGauge.set({ task: 'ready' }, (Date.now() - startTime) / 1000)
            if (process.env.BASE_PATH !== '') {
              logger.info(colors.cyan(`Server using proxy base path ${colors.bold(`${process.env.BASE_PATH}`)} for redirects`))
            }
            registerWebsocketEvents(server)
            if (readyCallback) {
              readyCallback()
            }
          })

        }


        export function close (exitCode: number | undefined) {
          if (server) {
            clearInterval(metricsUpdateLoop)
            server.close()
          }
          if (exitCode !== undefined) {
            process.exit(exitCode)
          }
        }</code></pre>
      cost: 30
      requirements: null
  tags:
    - value: Good Practice
- name: Deluxe Fraud
  description: "Obtain a Deluxe Membership without paying for it. (Difficulty Level: 3)"
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: f50f31406d69cedf487691442d1bc971ac063ac4
      data: null
  hints:
    - type: standard
      content: Look closely at what happens when you attempt to upgrade your account.
      cost: 45
      requirements: null
  tags: []
- name: CSRF
  description: 'Change the name of a user by performing Cross-Site Request Forgery
    from <a href="http://htmledit.squarefree.com">another origin</a>.
    (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: cf671aea0b6218d4eeb835071fdd328d969f5979
      data: null
  hints:
    - type: standard
      content: Find a form which updates the username and then construct a malicious
        page in the online HTML editor. You probably need an older browser
        version for this.
      cost: 45
      requirements: null
  tags: []
- name: Bonus Payload
  description: "Use the bonus payload <code>&lt;iframe width=&quot;100%&quot;
    height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot;
    allow=&quot;autoplay&quot;
    src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com\
    /tracks/771984076&amp;color=%23ff5500&amp;auto_play=true&amp;hide_related=f\
    alse&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;s\
    how_teaser=true&quot;&gt;&lt;/iframe&gt;</code> in the <i>DOM XSS</i>
    challenge. (Difficulty Level: 1)"
  max_attempts: 0
  value: 100
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 22c4ae9ac03a164bca91047fe65f88be66480fba
      data: null
  hints:
    - type: standard
      content: Copy + Paste = Solved!
      cost: 10
      requirements: null
    - type: standard
      content: >-
        <pre><code>filterTable () {
            let queryParam: string = this.route.snapshot.queryParams.q
            if (queryParam) {
              queryParam = queryParam.trim()
              this.dataSource.filter = queryParam.toLowerCase()
              this.searchValue = this.sanitizer.bypassSecurityTrustHtml(queryParam)
              this.gridDataSource.subscribe((result: any) => {
                if (result.length === 0) {
                  this.emptyState = true
                } else {
                  this.emptyState = false
                }
              })
            } else {
              this.dataSource.filter = ''
              this.searchValue = undefined
              this.emptyState = false
            }
          }</code></pre>
      cost: 30
      requirements: null
  tags:
    - value: Shenanigans
    - value: Tutorial
- name: Reset Uvogin's Password
  description: "Reset Uvogin's password via the <a
    href=\"/#/forgot-password\">Forgot Password</a> mechanism with <i>the
    original answer</i> to his security question. (Difficulty Level: 4)"
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: e11433e1c37afc2165258a13bc613b5e343d44c4
      data: null
  hints:
    - type: standard
      content: You might have to do some OSINT on his social media personas to find
        out his honest answer to the security question.
      cost: 70
      requirements: null
    - type: standard
      content: >-
        <pre><code>-
          question: 'Your eldest siblings middle name?'
        -
          question: "Mother's maiden name?"
        -
          question: "Mother's birth date? (MM/DD/YY)"
        -
          question: "Father's birth date? (MM/DD/YY)"
        -
          question: "Maternal grandmother's first name?"
        -
          question: "Paternal grandmother's first name?"
        -
          question: 'Name of your favorite pet?'
        -
          question: "Last name of dentist when you were a teenager? (Do not include 'Dr.')"
        -
          question: 'Your ZIP/postal code when you were a teenager?'
        -
          question: 'Company you first work for as an adult?'
        -
          question: 'Your favorite book?'
        -
          question: 'Your favorite movie?'
        -
          question: 'Number of one of your customer or ID cards?'
        -
          question: "What's your favorite place to go hiking?"</code></pre>
      cost: 210
      requirements: null
  tags:
    - value: OSINT
- name: Meta Geo Stalking
  description: "Determine the answer to John's security question by looking at an
    upload of him to the Photo Wall and use it to reset his password via the <a
    href=\"/#/forgot-password\">Forgot Password</a> mechanism. (Difficulty
    Level: 2)"
  max_attempts: 0
  value: 250
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 8c12e47df6add5204620269b470f0cad478ff9b6
      data: null
  hints:
    - type: standard
      content: Take a look at the meta data of the corresponding photo.
      cost: 25
      requirements: null
  tags:
    - value: OSINT
- name: Visual Geo Stalking
  description: "Determine the answer to Emma's security question by looking at an
    upload of her to the Photo Wall and use it to reset her password via the <a
    href=\"/#/forgot-password\">Forgot Password</a> mechanism. (Difficulty
    Level: 2)"
  max_attempts: 0
  value: 250
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: e4a8010ba6ce8f3666472773267e4caa40eab8f4
      data: null
  hints:
    - type: standard
      content: Take a look at the details in the photo to determine the location of
        where it was taken.
      cost: 25
      requirements: null
  tags:
    - value: OSINT
- name: Kill Chatbot
  description: "Permanently disable the support chatbot so that it can no longer
    answer customer queries. (Difficulty Level: 5)"
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 9ddc005d50ddebbb8538a42c38819b1277e1377c
      data: null
  hints:
    - type: standard
      content: Think of a way to get a hold of the internal workings on the chatbot API.
      cost: 100
      requirements: null
  tags:
    - value: Code Analysis
- name: Poison Null Byte
  description: 'Bypass a security control with a <a
    href="https://hakipedia.com/index.php/Poison_Null_Byte">Poison Null Byte</a>
    to access a file not meant for your eyes. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 9ff5f9ce7e8c741fc89ecb5c1b998ca9e38dda80
      data: null
  hints:
    - type: standard
      content: Take a look at the details in the photo to determine the location of
        where it was taken.
      cost: 70
      requirements: null
  tags:
    - value: Prerequisite
- name: Bully Chatbot
  description: "Receive a coupon code from the support chatbot. (Difficulty Level: 1)"
  max_attempts: 0
  value: 100
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: 91a566357f8647a3250dc71ca89db87c6b29d384
      data: null
  hints:
    - type: standard
      content: Just keep asking.
      cost: 10
      requirements: null
  tags:
    - value: Shenanigans
    - value: Brute Force
- name: Local File Read
  description: "Gain read access to an arbitrary local file on the web server.
    (Difficulty Level: 5)"
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 288d39148cd97e9ae7d4bb60ea1b02ef72b0cfd8
      data: null
  hints:
    - type: standard
      content: You should read up on vulnerabilities in popular NodeJs template engines.
      cost: 100
      requirements: null
  tags:
    - value: OSINT
    - value: Danger Zone
- name: Mass Dispel
  description: 'Close multiple "Challenge solved"-notifications in one go.
    (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: 973852184b7691fb489070e898037ae116d2cc21
      data: null
  hints:
    - type: standard
      content: Either check the official documentation or inspect a notification UI
        element directly.
      cost: 10
      requirements: null
  tags: []
- name: Security Advisory
  description: ' The Juice Shop is susceptible to a known vulnerability in a
    library, for which an advisory has already been issued, marking the Juice
    Shop as <i>known affected</i>. A fix is still pending. <a
    href="/#/contact">Inform the shop</a> about a suitable checksum as proof
    that you did your due diligence. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: 0afa6e8568a32269bef63589b3498c1f4ecc11c3
      data: null
  hints:
    - type: standard
      content: Security Advisories are often listed in the security.txt
      cost: 45
      requirements: null
  tags: []
